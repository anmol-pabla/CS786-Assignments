{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of 190154_Ans",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "<h1>CS786 Assignment-1 on Hopfield Networks by Anmol Pabla (190154)<h1>"
      ],
      "metadata": {
        "id": "-RmfLYY0tV6x"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Q1:- Writing our own Hopfield network model <h2>"
      ],
      "metadata": {
        "id": "Rpehg3NzbK7D"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The model implemented is the same as that provided in the Question Notebook. In this simplified Hopfied model, each neuron can only take values +1 or -1. The network activation of all the neurons evolves as follows\n",
        "\n",
        "$$S_i(t+1) = sgn\\left(\\sum_j{w_{ij} S_j(t)}\\right), $$\n",
        "\n",
        "where the weight of every synaptic connection is calculated as,\n",
        "\n",
        "$$w_{ij} = \\frac{1}{N} \\sum_{\\mu}{p_i^\\mu p_j^\\mu}, $$\n",
        "\n",
        "where in turn, $N$ is the number of neurons, and $p_i^\\mu$ is the state of the $i^{th}$ neuron for encoding pattern $\\mu$."
      ],
      "metadata": {
        "id": "lG4u0Pzqt2q6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# installing Neurodynex3 to import necessary libraries\n",
        "!pip install neurodynex3             "
      ],
      "metadata": {
        "id": "UFIshI4957VY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# importing the required libraries and functions\n",
        "\n",
        "import random\n",
        "import numpy as np\n",
        "import math\n",
        "from copy import deepcopy\n",
        "import matplotlib.pyplot as plt\n",
        "from neurodynex3.hopfield_network import network, pattern_tools, plot_tools"
      ],
      "metadata": {
        "id": "IQGCVy7u49M2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# function to obtain random patterns, returns pattern list consisting of\n",
        "# pattern_num number of patterns of size pattern_size x pattern_size \n",
        "def get_patterns(pattern_size, pattern_num):\n",
        "  # Final list plist - Dimensions:(pattern_num,pattern_size, pattern_size)\n",
        "  plist = []                                    \n",
        "  for i in range(pattern_num):\n",
        "    # Single Pattern lis2 - Dimensions:(pattern_size, pattern_size)\n",
        "    lis2 = []                                   \n",
        "    for j in range(pattern_size):\n",
        "      # Pattern Row lis1 - Dimensions:(pattern_size)\n",
        "      lis1 = []                                 \n",
        "      for k in range(pattern_size):\n",
        "        # Randomly Choosing between 1 and -1\n",
        "        lis1.append(random.choice([-1,1]))      \n",
        "      lis2.append(lis1)\n",
        "    plist.append(lis2) \n",
        "  return (plist)     \n",
        "\n",
        "\n",
        "# function to perturb the pattern to create noisy stimulus\n",
        "# return noisy pattern after making perturb_num flips in pattern \n",
        "def perturb_pattern(pattern, perturb_num):\n",
        "  # Choosing perturb_num indices to filp \n",
        "  rand = random.sample(range(len(pattern)**2), perturb_num)             \n",
        "  for i in range(perturb_num):\n",
        "    # Calculating indices to be flipped (row : rand[i]/len; column : rand[i]%len)\n",
        "    a = math.trunc(rand[i]/len(pattern))\n",
        "    b = rand[i]%len(pattern)\n",
        "    # Flipping the state\n",
        "    pattern[a][b] = pattern[a][b]*-1                                    \n",
        "  return (pattern)  \n",
        "\n",
        "\n",
        "# function to calculate weights using training data/patterns\n",
        "def calculate_weights(plist, pattern_size):\n",
        "  # Final List wghts - Dimensions:(pattern_size,pattern_size)\n",
        "  wghts = []\n",
        "  for i in range(pattern_size**2):\n",
        "    # wghts row w - Dimensions:(pattern_size)\n",
        "    w = []\n",
        "    for j in range(pattern_size**2):\n",
        "      # calculating weight for a given Neuron pair i,j: stored in sum\n",
        "      sum = 0\n",
        "      if(i!=j):\n",
        "        for k in range(len(plist)):\n",
        "          sum = sum + plist[k][math.trunc(i/pattern_size)][i%pattern_size] * plist[k][math.trunc(j/pattern_size)][j%pattern_size]\n",
        "      w.append(sum/pattern_size**2)\n",
        "    wghts.append(w)\n",
        "  return wghts\n",
        "\n",
        "\n",
        "# function to calculate further states based on weights calculated\n",
        "def network_evolution(S,wghts):\n",
        "  # Spuls1 stores next state\n",
        "  Splus1 = deepcopy(S)\n",
        "  for i in range(len(S)**2):\n",
        "    sum=0\n",
        "    for j in range(len(S)**2):\n",
        "      # calculating the new state for pair i,j\n",
        "      sum = sum + wghts[i][j]*S[math.trunc(j/len(S))][j%len(S)]\n",
        "    # Assigning neuron state for Splus1 \n",
        "    Splus1[math.trunc(i/len(S))][i%len(S)] = np.sign(sum)\n",
        "  return Splus1"
      ],
      "metadata": {
        "id": "cp2HciVq0KrD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Function that implements the complete Hopfield Network based on arguments\n",
        "def Hopfield_Network(pattern_size, num_pattern, pertubation_num, evolution_num):\n",
        "  # get patterns \n",
        "  plist = get_patterns(pattern_size, num_pattern)\n",
        "  cue = deepcopy(plist)\n",
        "  # calculate weights\n",
        "  wghts = calculate_weights(plist, pattern_size)\n",
        "\n",
        "  # create noisy input and place it in state_list\n",
        "  perturbed_pattern = perturb_pattern(cue[0],pertubation_num)\n",
        "  state_list = [perturbed_pattern]\n",
        "\n",
        "  # Evolve the Network\n",
        "  S_itr = deepcopy(perturbed_pattern)\n",
        "  for i in range(evolution_num):\n",
        "      S_itr = network_evolution(S_itr,wghts)\n",
        "      state_list.append(S_itr)\n",
        "\n",
        "  # Convert to arrays: Helpful when plotting patterns and lists\n",
        "  plist_array = np.array(plist)\n",
        "  state_list_array = np.array(state_list)\n",
        "  cue_array = np.array(cue)\n",
        "  \n",
        "  return plist_array, perturbed_pattern, state_list_array\n",
        "\n",
        "\n",
        "# FUnction to plot patterns, overlaps and network evolution using Neurodynex3 tools\n",
        "def plot_Hopfield(plist, cue, state_list):\n",
        "  print('\\nThe Patterns generated are:\\n')\n",
        "  plot_tools.plot_pattern_list(plist)\n",
        "  print('\\n\\nThe Pertubed Pattern (noisy input to network) is:\\n')  \n",
        "  plot_tools.plot_pattern(cue)\n",
        "  print('\\n\\nThe Evolution of the Network is:')\n",
        "  plot_tools.plot_state_sequence_and_overlap(state_list, plist, reference_idx=0, suptitle=\"Network dynamics\")"
      ],
      "metadata": {
        "id": "QeN8rSlp2E4b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calling the Function and Plotting the patterns and network evolution\n",
        "plist, perturbed_pattern, state_list = Hopfield_Network(pattern_size = 5, num_pattern = 4, pertubation_num = 5, evolution_num = 3)\n",
        "plot_Hopfield(plist, perturbed_pattern, state_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 819
        },
        "id": "SiGZ68XuU_ht",
        "outputId": "e30d24ec-3409-4db0-d20f-c3ccf08319fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "The Patterns generated are:\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV0AAABnCAYAAACjHpHIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAE/klEQVR4nO3cTYiVZRiH8etvRkZmuGxRLSoQCgSpIKGFEH2RUC1aFJWLokW7FmEhlBsRbVG0KJBCKlq3q6CgKIRW4iIoKkoqqkWZH2WrnhZzgnGYOcY5zv2c98z1A2F0HN773HO8eD0en7TWkCTVWNd7AElaS4yuJBUyupJUyOhKUiGjK0mFjK4kFTK6klRoJqOb5PskZ5OcSfJrksNJNia5JMkbSU4l+SXJ071nHaIx+30wyZEkfyX5uPecQzRmty8m+TrJ6SRfJnm096xDM2a3B5L8MOrC8STP9Z51nJmM7sjO1tpGYBtwE7AHeAG4HrgG2AE8k+SubhMO23L7/R14Cdjfc7A5sNxu/wR2AlcAjwEvJ9neb8TBWm63rwNbWmubgO3Aw0ke6DjjWOt7D3A+rbWfkrwH3MjCone11k4AJ5IcAnYB73cccdAW77e1thsgyeOdx5oLS3Z776JPfZ7kU+BW4Eif6YZtyW6/WvLpf4DrOoz1v8zynS4ASa4C7gG+A64Eji369DHghh5zzYtF+z3ae5Z5s9Juk1wK3Ax80WOuebB0t0l2JzkD/AhcBrzTcbyxZjm67yb5A/gM+AQ4MPr1k4t+z0ng8urB5sTS/e7rPM88Od9uX2PhhuGD6sHmwLK7ba3tZ6EF24C3OLcTM2WWX164r7X24X8/SbJ59OEm4O9FH5+uHmxOnLNfXVAr7jbJQRZeKtvRPG1qEivudrTPo0nuBPYCM/kP7bN8p3uO0eu4PwNbF/3yVvwrmgYiyV7gbuCO1tqp3vPMsfXAtb2HWMlgojvyJrAnyeYkW4AngMN9R5ofSS5KsoGFJ+26JBuSXNx7rnmQ5FngIeD21tpvveeZF0nWJXly1IQkuQV4Cvio92wrGVp0nwe+BY6z8HrOwdaa71y4cB4BzgKvAreNPj7UdaL5sQ+4Gvhm9D7TM7P+ftIBuZ+FLpwG3gZeGf2YSfFlJUmqM7Q7XUkaNKMrSYWMriQVMrqSVMjoSlKhsf8jLWTytzZM+qUtE19yYlM8zNaYeOCEKS484WWneKw9TLrfLs/daXT4fk682x7P2x5Wabfe6UpSIaMrSYWMriQVMrqSVMjoSlIhoytJhYyuJBUyupJUyOhKUiGjK0mFjK4kFTK6klTI6EpSIaMrSYXGHu04tGMA+xwnObAdTaPLsXwD2u80+xnan7UhmbEueKcrSYWMriQVMrqSVMjoSlIhoytJhYyuJBUyupJUyOhKUiGjK0mFjK4kFTK6klTI6EpSIaMrSYXGnzLWQ4/Tlqa55jTjrpVTqXrtd+JrTvh9mepxdrjmpHo8b7uccLc6vNOVpEJGV5IKGV1JKmR0JamQ0ZWkQkZXkgoZXUkqZHQlqZDRlaRCRleSChldSSpkdCWpkNGVpEJGV5IKzd7RjtPocvzbFEfrDe1Yvi7XHNARlmvlqM5prJVjM8d8qXe6klTI6EpSIaMrSYWMriQVMrqSVMjoSlIhoytJhYyuJBUyupJUyOhKUiGjK0mFjK4kFTK6klRovk4Z63Jq1zRf2+NUtCkMbb+TmvRxTvP97HES1pD0OMFtlU7H805XkgoZXUkqZHQlqZDRlaRCRleSChldSSpkdCWpkNGVpEJGV5IKGV1JKmR0JamQ0ZWkQkZXkgoZXUkqlNbWyNFwkjQDvNOVpEJGV5IKGV1JKmR0JamQ0ZWkQkZXkgr9C2ERHoTeZUrEAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 4 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "The Pertubed Pattern (noisy input to network) is:\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAOcAAADnCAYAAADl9EEgAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAADEElEQVR4nO3YUarCMBRFUfPo/Kd83wSsIKjZ1rV+83MI3QS6ZuYG9PztHgDcJ06IEidEiROixAlRx6PDdVt+5b7Lt13trN0LLmtOLtfLCVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidEiROixAlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidEiROixAlR4oQocULU8fB0zYdm/KBZuxc855u+hW+72xNeTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidEiROixAlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidEHbsHwMut2b3gOSdzvZwQJU6IEidEiROixAlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidEiROixAlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRB27B/ysNbsXPGfW7gUXdv9b8HJClDghSpwQJU6IEidEiROixAlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidEiROixAlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4Iep4eDrrQzNeYM3uBdfmft/n5Gq9nBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidEiROixAlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidErZnZvQG4w8sJUeKEKHFClDghSpwQJU6I+gc56hnODC9jMgAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "The Evolution of the Network is:\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 8 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Q2:- Running the model with different parameters to figure out how the model's capacity to retrieve the correct pattern in response to a cue deteriorates as a function of :\n",
        "\n",
        "*   <h3>The informativeness of the cue</h3>\n",
        "*   <h3>The number of other patterns stored in the network</h3>\n",
        "*   <h3>The size of the network</h3>\n",
        "</h3>\n"
      ],
      "metadata": {
        "id": "DhYLmqXvfj4A"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###a) Informativeness of the Cue:<br>This can be varied by changing the number of pertubations in the initial cue, the greater the number of pertubations/flips the lower is the informativeness."
      ],
      "metadata": {
        "id": "olJnICxA1Xow"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# overlaps_a : List to store overlap between final achieved state and the original pattern\n",
        "overlaps_a = []\n",
        "\n",
        "# Overlap calculated with a Pattern of size 10x10 for 5 extra patterns in network\n",
        "# and 3 evolution steps for Flips in the cue varying from 10 to 80\n",
        "pertub_number = range(10,81)\n",
        "for i in range(10,81):\n",
        "  plist, cue, state_list = Hopfield_Network(pattern_size = 10, num_pattern = 6, pertubation_num = i, evolution_num = 3)\n",
        "  overlap = pattern_tools.compute_overlap(state_list[-1], plist[0])\n",
        "  overlaps_a.append(overlap)\n",
        "\n",
        "# Plotting the results \n",
        "plt.title('Overlap of final state Vs Percentage Pertubated')\n",
        "plt.xlabel('Number of Pertubations')\n",
        "plt.ylabel('Overlap of final state')\n",
        "plt.plot(pertub_number, overlaps_a,'r',label = 'Original Plot')\n",
        "\n",
        "# Plotting a regressed line through thhe results obtained to understand the trend\n",
        "m, b = np.polyfit(pertub_number, overlaps_a, 1)\n",
        "pert_fit = []\n",
        "for k in pertub_number:\n",
        "  pert_fit.append(m*k + b)\n",
        "plt.plot(pertub_number, pert_fit ,'g',label = 'Regressed Line')\n",
        "plt.legend()  \n",
        "\n",
        "plt.show()  "
      ],
      "metadata": {
        "id": "WudGxR9l7VbK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "6cf67fce-fef2-4640-ef70-4075f6d11384"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We find that initially the network manages to reach the original state irrespective of the no. of flips but as the cue gets noisier the model's capacity to retrieve the original state begins to deteriorate gradually and it ultimately reaches a stage where the state obtained is the opposite of the original pattern.\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "_sL0Hno3oens"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###b) The number of other patterns stored in the network:<br>\n",
        "###This can be directly affected by changing the num_pattern"
      ],
      "metadata": {
        "id": "YzpzMyIp3lpu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# overlaps_b : List to store overlap between final achieved state and the original pattern\n",
        "overlaps_b = []\n",
        "num_pat = range(1,81)\n",
        "\n",
        "# Overlap calculated with a Pattern of size 10x10 with cue having 25 flips\n",
        "# and 3 evolution steps for No. of extra patterns varying from 1 to 80\n",
        "for i in range(2,82):\n",
        "  plist, cue, state_list = Hopfield_Network(pattern_size = 10, num_pattern = i, pertubation_num = 25, evolution_num = 3)\n",
        "  overlap = pattern_tools.compute_overlap_list(state_list[-1], plist)\n",
        "  overlaps_b.append(max(overlap))\n",
        "\n",
        "# Plotting the results \n",
        "plt.title('Overlap of final state Vs Number of Extra Patterns')\n",
        "plt.xlabel('Number of Extra Patterns')\n",
        "plt.ylabel('Overlap of final state')\n",
        "plt.plot(num_pat, overlaps_b,'r',label = 'Original Plot')\n",
        "\n",
        "# Plotting a regressed line through thhe results obtained to understand the trend\n",
        "m, b = np.polyfit(num_pat, overlaps_b, 1)\n",
        "num_pat_fit = []\n",
        "for k in num_pat:\n",
        "  num_pat_fit.append(m*k + b)\n",
        "plt.plot(num_pat, num_pat_fit ,'g',label = 'Regressed Line')\n",
        "plt.legend()  \n",
        "plt.show()  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "qlbVCno50RXC",
        "outputId": "33213efa-4d1c-45be-cabd-bc69acbdf644"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can clearly see a gradual decline in the capability of the model to retrieve the original state with an increase in the number of extra patterns. This is expected as an increase in the patterns would lead to the weights being affected, thereby making it difficult for the Network to correctly retreive the original state.\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "Wb60KIbPqc-w"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###c) The size of the network, given by the size of the patterns:<br>\n",
        "###Here I have calculated variation of overlap with network size for 5 different levels of Informativeness/Extent of Pertubations"
      ],
      "metadata": {
        "id": "nqpTdCaV5Q8_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# overlaps_c : List to store overlap between final achieved state and the original pattern\n",
        "overlaps_c = []\n",
        "# nueron_num : Number of Neurons in Pattern - Needed for the x-axis of plots\n",
        "nueron_num = [k**2 for k in range(10,31)]\n",
        "# pert_perc : Fraction by which the pattern is pertubed, 0.5 means 50% of the pattern has been flipped\n",
        "pert_perc = [0.3,0.4,0.5,0.6,0.7]\n",
        "\n",
        "\n",
        "# Overlap calculated with a Pattern size varying between 10x10 to 30x30 with cue \n",
        "# flips varying between 30% to 70%, in increments of 10%. The number of extra patterns\n",
        "# is 10 and the network has 3 evolution steps \n",
        "for j in pert_perc:\n",
        "  o=[]\n",
        "  for i in range(10,31):\n",
        "    plist, cue, state_list = Hopfield_Network(pattern_size = i, num_pattern = 10, pertubation_num = int(j*(i**2)), evolution_num = 3)\n",
        "    overlap = pattern_tools.compute_overlap_list(state_list[-1], plist)\n",
        "    o.append(max(overlap))\n",
        "  overlaps_c.append(o)"
      ],
      "metadata": {
        "id": "SA3-q-VxQ53q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting the results for all the differnt pertubation levels\n",
        "plt.title('Overlap of final state Vs The size of Network/Patterns')\n",
        "plt.xlabel('The size of Network/Patterns')\n",
        "plt.ylabel('Overlap of final state')\n",
        "for j in range(len(overlaps_c)):\n",
        "  t = 'Perturbed by '+ str(pert_perc[j]*100) +' %'\n",
        "  plt.plot(nueron_num, overlaps_c[j],label = t)\n",
        "plt.legend(bbox_to_anchor=(1.1, 1.05))  \n",
        "plt.show()  \n",
        "\n",
        "plt.title('Above plot fit with Linear Regression')\n",
        "plt.xlabel('The size of Network/Patterns')\n",
        "plt.ylabel('Overlap of final state')\n",
        "\n",
        "# Plotting regressed lines through the results to understand the trends\n",
        "for j in range(len(overlaps_c)):\n",
        "  t = 'Perturbed by '+ str(pert_perc[j]*100) +' %'\n",
        "  m, b = np.polyfit(nueron_num, overlaps_c[j], 1)\n",
        "  pert_fit = []\n",
        "  for k in nueron_num:\n",
        "    pert_fit.append(m*k + b)\n",
        "  plt.plot(nueron_num, pert_fit ,label=t)\n",
        "plt.legend(bbox_to_anchor=(1.1, 1.05))  \n",
        "plt.show() "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "9-U3aInGZcxx",
        "outputId": "3bbe2591-d22f-44c7-e8c9-03a9c3a8546e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The situation above can be summarized as:\n",
        "\n",
        "*   For cases with low levels of pertubation (<50%) the performace of the network doesn't deteriorate with an increase in the size of the network, it remains constant and in some cases there might even be an improvement.  \n",
        "*   For higher levels of pertubation, we see a sharp decline in the performance of the model as the size of the network increases.\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "AD5NhIHbrdQr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Q3:- Converting MNIST digit data to Patterns that can be used in the Network"
      ],
      "metadata": {
        "id": "huWxMDex7Wjn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Loading the MNIST Dataset, x_train, x_test store images whereas y_train and y_test store labels\n",
        "from keras.datasets import mnist\n",
        "\n",
        "(x_train, y_train), (x_test, y_test) = mnist.load_data()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "if6stguo7ZzY",
        "outputId": "a0d45726-34e4-43cf-a2bb-a6c0dfa4b2a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11493376/11490434 [==============================] - 0s 0us/step\n",
            "11501568/11490434 [==============================] - 0s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing some libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "# Example of MNIST Image\n",
        "plt.imshow(x_train[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "nbciH5Gv8Fuc",
        "outputId": "37c14e2a-3c8a-4901-92d5-0413b1fa9394"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f1147e3ff50>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAOZ0lEQVR4nO3dbYxc5XnG8euKbezamMQbB9chLjjgFAg0Jl0ZEBZQobgOqgSoCsSKIkJpnSY4Ca0rQWlV3IpWbpUQUUqRTHExFS+BBIQ/0CTUQpCowWWhBgwEDMY0NmaNWYENIX5Z3/2w42iBnWeXmTMv3vv/k1Yzc+45c24NXD5nznNmHkeEAIx/H+p0AwDag7ADSRB2IAnCDiRB2IEkJrZzY4d5ckzRtHZuEkjlV3pbe2OPR6o1FXbbiyVdJ2mCpH+LiJWl50/RNJ3qc5rZJICC9bGubq3hw3jbEyTdIOnzkk6UtMT2iY2+HoDWauYz+wJJL0TE5ojYK+lOSedV0xaAqjUT9qMk/WLY4621Ze9ie6ntPtt9+7Snic0BaEbLz8ZHxKqI6I2I3kma3OrNAaijmbBvkzRn2ONP1JYB6ELNhP1RSfNsz7V9mKQvSlpbTVsAqtbw0FtE7Le9TNKPNDT0tjoinq6sMwCVamqcPSLul3R/Rb0AaCEulwWSIOxAEoQdSIKwA0kQdiAJwg4kQdiBJAg7kARhB5Ig7EAShB1IgrADSRB2IAnCDiRB2IEkCDuQBGEHkiDsQBKEHUiCsANJEHYgCcIOJEHYgSQIO5AEYQeSIOxAEoQdSIKwA0kQdiCJpmZxRffzxPJ/4gkfm9nS7T/3F8fUrQ1OPVBc9+hjdxTrU7/uYv3Vaw+rW3u893vFdXcOvl2sn3r38mL9uD9/pFjvhKbCbnuLpN2SBiXtj4jeKpoCUL0q9uy/FxE7K3gdAC3EZ3YgiWbDHpJ+bPsx20tHeoLtpbb7bPft054mNwegUc0exi+MiG22j5T0gO2fR8TDw58QEaskrZKkI9wTTW4PQIOa2rNHxLba7Q5J90paUEVTAKrXcNhtT7M9/eB9SYskbayqMQDVauYwfpake20ffJ3bI+KHlXQ1zkw4YV6xHpMnFeuvnPWRYv2d0+qPCfd8uDxe/JPPlMebO+k/fzm9WP/Hf1lcrK8/+fa6tZf2vVNcd2X/54r1j//k0PtE2nDYI2KzpM9U2AuAFmLoDUiCsANJEHYgCcIOJEHYgST4imsFBs/+bLF+7S03FOufmlT/q5jj2b4YLNb/5vqvFOsT3y4Pf51+97K6tenb9hfXnbyzPDQ3tW99sd6N2LMDSRB2IAnCDiRB2IEkCDuQBGEHkiDsQBKMs1dg8nOvFOuP/WpOsf6pSf1VtlOp5dtPK9Y3v1X+Kepbjv1+3dqbB8rj5LP++b+L9VY69L7AOjr27EAShB1IgrADSRB2IAnCDiRB2IEkCDuQhCPaN6J4hHviVJ/Ttu11i4FLTi/Wdy0u/9zzhCcPL9af+Pr1H7ing67Z+TvF+qNnlcfRB994s1iP0+v/APGWbxZX1dwlT5SfgPdZH+u0KwZGnMuaPTuQBGEHkiDsQBKEHUiCsANJEHYgCcIOJME4exeYMPOjxfrg6wPF+ku31x8rf/rM1cV1F/zDN4r1I2/o3HfK8cE1Nc5ue7XtHbY3DlvWY/sB25tqtzOqbBhA9cZyGH+LpPfOen+lpHURMU/SutpjAF1s1LBHxMOS3nsceZ6kNbX7aySdX3FfACrW6G/QzYqI7bX7r0qaVe+JtpdKWipJUzS1wc0BaFbTZ+Nj6Axf3bN8EbEqInojoneSJje7OQANajTs/bZnS1Ltdkd1LQFohUbDvlbSxbX7F0u6r5p2ALTKqJ/Zbd8h6WxJM21vlXS1pJWS7rJ9qaSXJV3YyibHu8Gdrze1/r5djc/v/ukvPVOsv3bjhPILHCjPsY7uMWrYI2JJnRJXxwCHEC6XBZIg7EAShB1IgrADSRB2IAmmbB4HTrji+bq1S04uD5r8+9HrivWzvnBZsT79e48U6+ge7NmBJAg7kARhB5Ig7EAShB1IgrADSRB2IAnG2ceB0rTJr3/thOK6/7f2nWL9ymtuLdb/8sILivX43w/Xrc35+58V11Ubf+Y8A/bsQBKEHUiCsANJEHYgCcIOJEHYgSQIO5AEUzYnN/BHpxfrt1397WJ97sQpDW/707cuK9bn3bS9WN+/eUvD2x6vmpqyGcD4QNiBJAg7kARhB5Ig7EAShB1IgrADSTDOjqI4Y36xfsTKrcX6HZ/8UcPbPv7BPy7Wf/tv63+PX5IGN21ueNuHqqbG2W2vtr3D9sZhy1bY3mZ7Q+3v3CobBlC9sRzG3yJp8QjLvxsR82t/91fbFoCqjRr2iHhY0kAbegHQQs2coFtm+8naYf6Mek+yvdR2n+2+fdrTxOYANKPRsN8o6VhJ8yVtl/Sdek+MiFUR0RsRvZM0ucHNAWhWQ2GPiP6IGIyIA5JukrSg2rYAVK2hsNuePezhBZI21nsugO4w6ji77TsknS1ppqR+SVfXHs+XFJK2SPpqRJS/fCzG2cejCbOOLNZfuei4urX1V1xXXPdDo+yLvvTSomL9zYWvF+vjUWmcfdRJIiJiyQiLb266KwBtxeWyQBKEHUiCsANJEHYgCcIOJMFXXNExd20tT9k81YcV67+MvcX6H3zj8vqvfe/64rqHKn5KGgBhB7Ig7EAShB1IgrADSRB2IAnCDiQx6rfekNuBheWfkn7xC+Upm0+av6VubbRx9NFcP3BKsT71vr6mXn+8Yc8OJEHYgSQIO5AEYQeSIOxAEoQdSIKwA0kwzj7OufekYv35b5bHum86Y02xfuaU8nfKm7En9hXrjwzMLb/AgVF/3TwV9uxAEoQdSIKwA0kQdiAJwg4kQdiBJAg7kATj7IeAiXOPLtZfvOTjdWsrLrqzuO4fHr6zoZ6qcFV/b7H+0HWnFesz1pR/dx7vNuqe3fYc2w/afsb207a/VVveY/sB25tqtzNa3y6ARo3lMH6/pOURcaKk0yRdZvtESVdKWhcR8yStqz0G0KVGDXtEbI+Ix2v3d0t6VtJRks6TdPBayjWSzm9VkwCa94E+s9s+RtIpktZLmhURBy8+flXSrDrrLJW0VJKmaGqjfQJo0pjPxts+XNIPJF0eEbuG12JodsgRZ4iMiFUR0RsRvZM0ualmATRuTGG3PUlDQb8tIu6pLe63PbtWny1pR2taBFCFUQ/jbVvSzZKejYhrh5XWSrpY0sra7X0t6XAcmHjMbxXrb/7u7GL9or/7YbH+px+5p1hvpeXby8NjP/vX+sNrPbf8T3HdGQcYWqvSWD6znyHpy5Kesr2htuwqDYX8LtuXSnpZ0oWtaRFAFUYNe0T8VNKIk7tLOqfadgC0CpfLAkkQdiAJwg4kQdiBJAg7kARfcR2jibN/s25tYPW04rpfm/tQsb5ken9DPVVh2baFxfrjN5anbJ75/Y3Fes9uxsq7BXt2IAnCDiRB2IEkCDuQBGEHkiDsQBKEHUgizTj73t8v/2zx3j8bKNavOu7+urVFv/F2Qz1VpX/wnbq1M9cuL657/F//vFjveaM8Tn6gWEU3Yc8OJEHYgSQIO5AEYQeSIOxAEoQdSIKwA0mkGWffcn7537XnT767Zdu+4Y1ji/XrHlpUrHuw3o/7Djn+mpfq1ub1ry+uO1isYjxhzw4kQdiBJAg7kARhB5Ig7EAShB1IgrADSTgiyk+w50i6VdIsSSFpVURcZ3uFpD+R9FrtqVdFRP0vfUs6wj1xqpn4FWiV9bFOu2JgxAszxnJRzX5JyyPicdvTJT1m+4Fa7bsR8e2qGgXQOmOZn327pO21+7ttPyvpqFY3BqBaH+gzu+1jJJ0i6eA1mMtsP2l7te0ZddZZarvPdt8+7WmqWQCNG3PYbR8u6QeSLo+IXZJulHSspPka2vN/Z6T1ImJVRPRGRO8kTa6gZQCNGFPYbU/SUNBvi4h7JCki+iNiMCIOSLpJ0oLWtQmgWaOG3bYl3Szp2Yi4dtjy2cOedoGk8nSeADpqLGfjz5D0ZUlP2d5QW3aVpCW252toOG6LpK+2pEMAlRjL2fifShpp3K44pg6gu3AFHZAEYQeSIOxAEoQdSIKwA0kQdiAJwg4kQdiBJAg7kARhB5Ig7EAShB1IgrADSRB2IIlRf0q60o3Zr0l6ediimZJ2tq2BD6Zbe+vWviR6a1SVvR0dER8bqdDWsL9v43ZfRPR2rIGCbu2tW/uS6K1R7eqNw3ggCcIOJNHpsK/q8PZLurW3bu1LordGtaW3jn5mB9A+nd6zA2gTwg4k0ZGw215s+znbL9i+shM91GN7i+2nbG+w3dfhXlbb3mF747BlPbYfsL2pdjviHHsd6m2F7W21926D7XM71Nsc2w/afsb207a/VVve0feu0Fdb3re2f2a3PUHS85I+J2mrpEclLYmIZ9raSB22t0jqjYiOX4Bh+0xJb0m6NSJOqi37J0kDEbGy9g/ljIi4okt6WyHprU5P412brWj28GnGJZ0v6Svq4HtX6OtCteF968SefYGkFyJic0TslXSnpPM60EfXi4iHJQ28Z/F5ktbU7q/R0P8sbVent64QEdsj4vHa/d2SDk4z3tH3rtBXW3Qi7EdJ+sWwx1vVXfO9h6Qf237M9tJONzOCWRGxvXb/VUmzOtnMCEadxrud3jPNeNe8d41Mf94sTtC938KI+Kykz0u6rHa42pVi6DNYN42djmka73YZYZrxX+vke9fo9OfN6kTYt0maM+zxJ2rLukJEbKvd7pB0r7pvKur+gzPo1m53dLifX+umabxHmmZcXfDedXL6806E/VFJ82zPtX2YpC9KWtuBPt7H9rTaiRPZniZpkbpvKuq1ki6u3b9Y0n0d7OVdumUa73rTjKvD713Hpz+PiLb/STpXQ2fkX5T0V53ooU5fn5T0RO3v6U73JukODR3W7dPQuY1LJX1U0jpJmyT9l6SeLurtPyQ9JelJDQVrdod6W6ihQ/QnJW2o/Z3b6feu0Fdb3jculwWS4AQdkARhB5Ig7EAShB1IgrADSRB2IAnCDiTx/65XcTNOWsh5AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The MNIST Images are grayscale and hence can't be directly used in the Hopfield Network as the neurons can have 256 possible states (0...255). <br><br>\n",
        "For use of MNIST Digit data in the Hopfield Network, the images have to be converted to Binary images, to improve the results obtained from this data, it would also be benefitial to reduce the pattern size and also remove blank rows and columns that exist in almost every image"
      ],
      "metadata": {
        "id": "N8KPRp_mA7UN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to shrink a Grayscale image to half its size (28x28 to 14x14)\n",
        "def shrink_me(img):\n",
        "  shrinked = []\n",
        "  for i in range(math.trunc(img.shape[0]/2)):\n",
        "    # l stores row of an image\n",
        "    l = []\n",
        "    for j in range(math.trunc(img.shape[1]/2)):\n",
        "      # Replacing 4 pixels (as a square) with their average (this reduces rows &\n",
        "      # columns by half) reducing the overall size by a factor of 4\n",
        "      t = ( int(img[2*i][2*j]) + int(img[2*i][2*j+1]) + int(img[2*i+1][2*j]) + int(img[2*i+1][2*j+1]) )/4\n",
        "      l.append(t)\n",
        "    shrinked.append(l)\n",
        "  # returning as an numpy array\n",
        "  return np.array(shrinked)    \n",
        "\n",
        "\n",
        "# Function shrinks the grayscale image and then converts it to binary\n",
        "def convert_for_Hopfield(orig_array):\n",
        "  # Getting an empty numpy array for storing data\n",
        "  arr = np.empty((orig_array.shape[0],14,14), dtype=int)\n",
        "  for i in range(arr.shape[0]):\n",
        "    # storing the shrinked grayscale images in arr\n",
        "    arr[i] = shrink_me(orig_array[i])\n",
        "    # Scanning through the image, converting it to binary\n",
        "    for j in range(arr.shape[1]):\n",
        "      for k in range(arr.shape[2]):\n",
        "        # COnverting pixels to binary thru a threshold of 127\n",
        "        if(arr[i][j][k]>127): arr[i][j][k]=1\n",
        "        else: arr[i][j][k]=-1\n",
        "  return arr \n",
        "\n",
        "\n",
        "# Also defining a function that converts images to binary without shrinking their size\n",
        "def convert_for_HopfieldNS(orig_array):\n",
        "  arr = np.empty((orig_array.shape[0],28,28), dtype=int)\n",
        "  for i in range(arr.shape[0]):\n",
        "    arr[i] = orig_array[i]\n",
        "    for j in range(arr.shape[1]):\n",
        "      for k in range(arr.shape[2]):\n",
        "        if(arr[i][j][k]>127): arr[i][j][k]=1\n",
        "        else: arr[i][j][k]=-1\n",
        "  return arr\n",
        "\n",
        "\n",
        "# Function to remove blank rows and columns that exist around data\n",
        "# Here 3 columns/rows have been removed from each end of the square, making the size (8,8)\n",
        "def crop(orig_array):\n",
        "  # empty array to store data\n",
        "  arr = np.empty((orig_array.shape[0],8,8), dtype=int)\n",
        "  for i in range(orig_array.shape[0]):\n",
        "    # storing the slices of original 14x14 in new array arr\n",
        "    arr[i] = orig_array[i, 3:11, 3:11]\n",
        "  return arr"
      ],
      "metadata": {
        "id": "eXtIGMpw8weL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Converting loaded data to the requires form, ns is symbolic for No-Shrink\n",
        "x_test_hop = convert_for_Hopfield(x_test)\n",
        "x_test_hopns = convert_for_HopfieldNS(x_test)\n",
        "x_train_hop = convert_for_Hopfield(x_train)\n",
        "x_train_hopns = convert_for_HopfieldNS(x_train)"
      ],
      "metadata": {
        "id": "ksTwin4x-ztx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# cropping the above data to get the final form to be used\n",
        "x_train_final = crop(x_train_hop)\n",
        "x_test_final = crop(x_test_hop)"
      ],
      "metadata": {
        "id": "7FfQlRPXqP6G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Printing Random converted images from the dataset\n",
        "indxs = random.sample(range(60000), 5)\n",
        "print('  Original |   Binary  | Shrinked  | Cropped')\n",
        "for k in indxs: \n",
        "  conv_patterns = [x_train[k], x_train_hopns[k], x_train_hop[k], x_train_final[k]]\n",
        "  plot_tools.plot_pattern_list(conv_patterns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 549
        },
        "id": "AdyFBNlt_aFP",
        "outputId": "6da9869d-6b19-4e17-945a-657cfcb25867"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Original |   Binary  | Shrinked  | Cropped\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 4 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 4 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 4 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 4 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV0AAABnCAYAAACjHpHIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAHwUlEQVR4nO3df6iddR3A8fdnKddwGROJNdGgZl6zMGdFDSKFWikJ+YP9scoNqgVF/VFwWUMprcaaBv0gjIkxrGbEKv/qxzSYJBcKpgySpmll6VxRM91KR3K//XHOfc7Zdn7ds3O/z4/7foGc7557zvN8/HDv53ye7/me54mUEpKkPJaVHYAkLSUWXUnKyKIrSRlZdCUpI4uuJGVk0ZWkjCy6kpRRJYtuRPwlIl6MiGMR8feI2BURyyNiKiK+FxEvRMThiPhc2bHW0YD8ro+I2Yj4b0TsKzvOOhqQ2zsi4o8RcTQiDkbETWXHWjcDcrsjIv7WrgtPRcTWsmMdpJJFt+3alNJyYA3wNuBm4EvARcDrgKuAmYj4QGkR1luv/B4BvgFsLzOwBuiV2/8A1wKvBjYC34yIteWFWFu9cns3MJ1SOgdYC3w4Iq4vMcaBzig7gGFSSs9ExC+AN9NK9KaU0nPAcxFxF7AJ+GWJIdZad35TSlsAIuLjJYfVCCfl9oNdP/ptRPwGeBcwW0509XZSbh876cdzwOoSwhpJlTtdACLiAuAa4M/Aa4EDXT8+AFxaRlxN0ZXfR8qOpWn65TYiXgm8HXi0jLia4OTcRsSWiDgGPA2cDewuMbyBqlx074uIfwMPAQ8CO9rbn+96zvPAq3IH1hAn53dbyfE0ybDcfpdWw/Cr3IE1QM/cppS206oFa4Dvc2KdqJQqTy98KKX0wPw/ImJFe3gO8FLX+GjuwBrihPxqovrmNiJupzVVdlXyalPj6Jvbdj4fiYj3A7cClfygvcqd7gna87jPApd1bb4MT9FUExFxK3A1sC6l9ELZ8TTYGcAbyg6in9oU3bZ7gJsjYkVETAOfAHaVG1JzRMQrIuIsWr+0yyLirIg4s+y4miAivgBsAN6bUvpX2fE0RUQsi4hPtmtCRMQ7gE8Dvy47tn7qVnS/CDwJPEVrPuf2lJIrFybno8CLwJ3Au9vju0qNqDm2ARcCT7TXmR6r+nrSGrmOVl04CvwA+Hb7v0oKp5UkKZ+6dbqSVGsWXUnKyKIrSRlZdCUpI4uuJGU08BtpEbi0YYiUiHFfa36HGze/5na40nObxv7TGU/k+5UYlFs7XUnKyKIrSRlZdCUpI4uuJGVk0ZWkjCy6kpSRRVeSMrLoSlJGVb5dj6Qqyv2lhoax05WkjCy6kpSRRVeSMrLoSlJGFl1JysiiK0kZZV8y9hr+AcAqDo38mpf+cDkAc91vERc/Vgwf540TiW3J6rUEKOO1R2vtdJdPmeclx05XkjLK0umu5olivO/8iwB4/Z8Wvp//dUW76e6Li/HjH7NbKExq4Xr3fuzGtBhy/15N6m/jNOO205WkjCy6kpTRok4vTHMQgNkVlxTbVo4xrdDLs6s6483sBGAnmyez87rxu/CTZ061SOx0JSmjSKn/pPA4t1ru/tDsdytaH5qtPHzq8zbv7Ixv3DPavl/u6sv/emFnvO/K1uNHNr6v2LaHG4vxYnbApd6CvcG3sJ5X2m3Cc+W2xA8px87tpIJu8Adp3oJdkirCoitJGU18euEm7inGPzq+se/znpw6vxhfwNMLPczQ49xyW2d86KvfAeBOPrXg4wxT2emFSZ66DTstW8TTxMpPL5zu/3uu4/Q6tNML4znN6QXvHCGpuhq4isTpBUnKqFbTC90Xydn9ns7r1+0d/Lr5Y40zjTFMY6cXFtJhOL1Q/eP0OnQdpheq2Om6ekGS6qOyc7rHzu68UcyubT3+87zOz9ftyhtP41Sxg2gKc6sB7HQlKSOLriRlVNr0wmd+9kwxvuOhU0/H3vTZzvjwytZj9/V0z3x54cfadt3WYttWto2+gzrKeYo7fyyvuysNZacrSRlNfMnYuRwpxntpXYBm7fGHxwjtVN13m7j8kh8W48/z9ZGOc9/U1cX4Gn4+kZhKXTJWBLEIXW2vrrWEb6aVtmSsl9PJc7/c1HHJ2Ci5zXmmNWpuKvKNNDtdScrIoitJGU38g7QjnFuMr+RBAPZPvbPYdsXxR0faz8zUl4vxT7kegLmu94h7me7sk/3t0WSmMWqn+3SnxNNVScPZ6UpSRhZdScpoUdfpHmM5AG/h952NU6O99isLOM6y9oep3et4U9fbSczNP29uAXutKacNFo+51QTY6UpSRpW94M1CzLWXxA37ltpaZovx/GUiD7Gq39MlaeLsdCUpo0Z0upIqxvnvvpZU0T3v+NFifNvUtwDYwvaywmme7jXC/tFNVq/11+a4lpxekKSMLLqSlFEjphf2cwUAMzs623bMlBSMJA1gpytJGTWi072XDQDsvWVXsW3HzP0lRdNg41xYR4ONc91i1ZqdriRlZNGVpIwaMb0wjtU3fA2ANT9ZX2x7mDVlhdM83qxSTTXS9E//33s7XUnKaMl2uht2tx5vmDpYbLPTlbTY7HQlKSOLriRlZNGVpIwsupKUkUVXkjKy6EpSRkt2yZikJWaUL+pkuO5Fo4ruen5cjFdPHSrGe6YvBeCtB7KH1Fxe/EYai9MLkpSRRVeSMoqU+s9zRAy4aoMASImxz63N73Dj5tfcDmdue5jQVFkasCM7XUnKyKIrSRlZdCUpI4uuJGU08IM0SdJk2elKUkYWXUnKyKIrSRlZdCUpI4uuJGVk0ZWkjP4PByP+a8bcZ8sAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 4 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Q4:- Writing an MNIST classifier using the Hopfield network"
      ],
      "metadata": {
        "id": "nX3m6I2LzlWK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The Hopfield Network has been trained using only 20 images (2 of each digit), this is because use of large no. of samples tends to reduce the performance of the network and also makes it very computationly expensive meaning the code requires a lot of time to run"
      ],
      "metadata": {
        "id": "vim9ukMCIFrx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# training images will be stored in x_train_figs\n",
        "x_train_figs = []\n",
        "\n",
        "# obtaining images\n",
        "j=0\n",
        "for k in range(2):\n",
        "  i=0\n",
        "  # obtaining 1 set of digits\n",
        "  while j < (x_train_final.shape[0]):\n",
        "      if(y_train[j]==i):\n",
        "        x_train_figs.append(x_train_final[j])\n",
        "        i+=1\n",
        "      j+=1\n",
        "      if(i==10): break  \n",
        "\n",
        "# plotting the two set of digits\n",
        "plot_tools.plot_pattern_list(x_train_figs[:10])      \n",
        "plot_tools.plot_pattern_list(x_train_figs[10:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 133
        },
        "id": "EW_FOwiEvcCZ",
        "outputId": "6dbf3793-3b6f-4ae2-a55f-952f445b27c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 10 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV0AAAA6CAYAAAATDorhAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAHu0lEQVR4nO3dbaxcVRXG8f9TCra8mVa/SMUoGAQ1ob6hYlSaVFBDohbTDwoUCSgRo9FPaIiEqGgsISaoaEgoEkqikYgvscTWWLRq0EhTEAUVbUORKraVtlh5scsP+zSZTu+de2fOnLXnps8vmTB35nb2c885s2afNXsGRQRmZpZjXu0AZmZHEhddM7NELrpmZolcdM3MErnompklctE1M0vkomtmlqhV0ZW0VdJ+Sfsk/UPSrZKOl/Q8SbdI2iNph6RPjSvwkDlWSvqVpP9I2thlhhlyXC/pz5L2SnpI0sWVcnxZ0qPNftkm6TM1cvTcv1jSE5I21cjR/PeZ5vaDl6OyczT3LZd0n6SnJG2XtDI7h6QH+7bFc5J+WCHHYknflrRT0r8krZV0Ylc5ZsiyRNL3Je1q9ssVrQeLiJEvwFZgeXN9CfB74EvAF4FfAIuAM4AdwDvbjDVijuXASuCzwMauxp9FjmuB0ykvcm8EdgNnV8jxCuC4ntsfBFZk5+i5/2bg58CmSvvlVuDzXR8Xs8jxSuCfwLuA+cALgFNr7ZfmdgF/Ay6usD2+DvwEOBF4PrABuKHSvvkZ8BXgaOBMYBewrM1YY2svRMRjwDrg1cAq4HMRsTsi/kh5cl0yrrFmmyMiNkTEd4C/Z4w9IMc1EfFQRByIiHspL0hvrpDj4Yh4qufuA8DLs3MASDq7ub4mY/zpctTSl+Nq4JsRsS4inouInRHxSIUcvd4GvBC4s0KOlwF3RcSeiHgS+B7wqowcfVleD5wDfCEino2ILcB3gUvbPP7Yiq6kk4F3U14dXwRs6bl7C0kbrSfH5ozxhs0haSHwBsosMz2HpKsk7QO2A8cBd2TnaE7hvwp8DEj9HPoU++Wjzanj7yRdUCnHm5rbHpD0uKTbJS2ukKPXKuDOvhfprBxfA86XtEjSIuACShFM0ZPlgYM39d5N2xfsMUzJ9wH/BrZRTgtOpjyRFvT83juArR2fGvTnWNhz/2XktRemzdH8zreAuwFV3B4CXkNpe5yQnQP4JHBT8zuXkNNemCrHaymn8vMpT7K9wFsq5Himue804HjK7HJtxePjWGAPcE6l/XISpaVwoLmsB46plGUTcCOwoDledgEPtxlrPu29NyI2HPyheWWC0o/5b8/1vWMYa9Y5Kpo2h6TVlFfJZdHs6Ro5mrE3SzqPUni7fKOz//g4Cfg48LoOx5wxR+O+nus/lrQWWAH8MjOHpP3Amoj4U/PzdZSi06VBz5cVlOJyT8cZpswhaT1wP/AeygTheuB2yvsz2Vk+SJl5Pwr8tcnR6qx9HEX3EBGxW9LjlKbz+ubmM0k6nZ5Ukq6lvFHy9ojYUztPYz5wavKYZ1HaT3+QBGU2sVDSDmBJRPwvOU+v4NBTySz3c2ibpfZX/60CbkuYGExnKXBlNK0NSd+gzDjTRcQ24PyDP0u6A/hNm8fsap3ubcDVTU/mdOByyjvFqSQdJWkBpbjMk7RA0tEVcnwa+ADl3dGd2eM3GeZJ+kizTyTpLOBK4KfJUdYBL6U8sZZSVpZsBpZmF1xJ72+WBc2TdC5wIfCDzAyNNcCHJJ0i6VjgKuBHFXIg6cXAMkobrJbfApdJWti8B/JhygtTOklnSDpB0jGSLgTOBW5o85hdFd1rgEcovZF7gNURcXdHYw1yEbAfuAl4a3P95go5rgNeAvylZw1kp2tkp/E+yn7ZSzlNurG5pImIpyNix8EL8CTwbHM92yeAxyh9vNXA5RGxMTtERNxCmajcS3nOPE1pwdRwEfDrSFo9MY1LKS/M2yn75xTK7LuG8yhthd3AFZSlr0+0eUDVO4MwMzvy+GPAZmaJXHTNzBK56JqZJXLRNTNLNHCdrjTiesEYfaljTPGPR84x42DT55xVjhZ/52xNmQOlv/uZul8G5YjD19HO+RwzHUcDdvdUOVplaaH1Nhm0Hfq3QdvnboLp9o1numZmiVx0zcwSueiamSUa33cvDNPf7O3PJPRFZzXWYT2jWTzeuFqrw26DQf2tIXpfE6M/Y37LemaHbceWGYc5FjO1Ol7GmDtzG3T2HJn6b/BM18wskYuumVmi0dsLc+G0dSa1TuPGve0G/R2D7qvV2pkrp8+9OUdpP40yToZRt8Gw/3acxt0aHGSY/THC9vBM18wskYuumVkiF10zs0TD9XQndZnLdCal79yqh5Y49jhzDBo3c4nYpByzw2yPQUbN3MV26LLP3eKj0UM//rh6uLPcHp7pmpklctE1M0s0uL0wFz4p1K/W6WTGKeJcMsxSo6FaIHNo283275rpeOh9nFE/GTeutkStY3dSl3eOkMszXTOzRC66ZmaJXHTNzBKN71vGJlHXfaBJWY40yKgfAx73t2oN+ma5oZbstBh3qrGzTMrxMJOay/mGOVbb5qr1TYd4pmtmlspF18wskYuumVmiOj3dgf+ngxaP1bWuergD/4YJWRc5zo8jj7tPOClrSQcZlLHmx8T7x898H2RS9lNmLxnPdM3MUrnompklGt+3jA2jy9OKSf24YNZYk7JEqqZJWco3qIVQM+NcOCZqtow6boF4pmtmlshF18wskYuumVkiRUzIsg0zsyOAZ7pmZolcdM3MErnompklctE1M0vkomtmlshF18ws0f8BFgLHTcM8gwQAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 10 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculating weights for the Hopfield model\n",
        "weights = calculate_weights(x_train_figs, 8)"
      ],
      "metadata": {
        "id": "RCCsL-B8znzI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Defining a function to predict the label of the pattern\n",
        "# It compares the obtained pattern with all training images and the label of \n",
        "# the one with max overlap is returned\n",
        "def predict_thru_overlap(pattern, train_array):\n",
        "  pred = 0\n",
        "  max = -1\n",
        "  for i in range(len(train_array)):\n",
        "    overlap = pattern_tools.compute_overlap(pattern, train_array[i])\n",
        "    if(overlap>max):\n",
        "      max = overlap\n",
        "      pred = i\n",
        "  return pred"
      ],
      "metadata": {
        "id": "MzGJkH4m6FyO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Counting the number of instances classified correctly\n",
        "correct = 0\n",
        "\n",
        "# Scanning through the x_test_final data\n",
        "for i in range(len(x_test_final)):\n",
        "  S_itrs = deepcopy(x_test_final[i])\n",
        "  # Running the network for 3 evolution steps\n",
        "  for j in range(3):\n",
        "    S_itrs = network_evolution(S_itrs,weights)\n",
        "  # Predicting the label of test image thru the function above  \n",
        "  pred = predict_thru_overlap(S_itrs,x_train_figs)  \n",
        "  # incrementing correct if classification is correct\n",
        "  if (pred==y_test[i]):\n",
        "    correct+=1\n",
        "\n",
        "correct"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mi9thGG3pdgS",
        "outputId": "a3c5ebba-e9f0-4f04-f9a3-17128c9a3107"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1353"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('The Accuracy of the Hopfield Classifier on MNIST Digit Data is: ', (correct*100) / len(x_test_final) ,' %')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LLfQpglaEklZ",
        "outputId": "b25a0344-72de-49b6-f930-a327b729e64e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The Accuracy of the Hopfield Classifier on MNIST Digit Data is:  13.53  %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The model has an accuracy of 13.53%, F Score is generally calculated for Binary classification. To do this we select a class (0 here) and the values are predicted as 0 or 1 (not 0)\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "qJnsJcFKKZ3M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# defining function to calculate F Score\n",
        "def Fscore(TP, FP, FN):\n",
        "  denominator = TP+ 0.5*(FP+FN)\n",
        "  return TP/denominator\n",
        "\n",
        "TP = 0      # True Positive\n",
        "FP = 0      # False Positive\n",
        "FN = 0      # False Negative  \n",
        "\n",
        "# Scanning through the x_test_final data\n",
        "for i in range(len(x_test_final)):\n",
        "  S_itrs = deepcopy(x_test_final[i])\n",
        "  # Running the network for 3 evolution steps\n",
        "  for j in range(3):\n",
        "    S_itrs = network_evolution(S_itrs,weights)\n",
        "  # Predicting the label of test image thru the function above  \n",
        "  pred = predict_thru_overlap(S_itrs,x_train_figs)  \n",
        "  # incrementing TP,FP,FN based on classification \n",
        "  if (y_test[i]==0 and pred==0):\n",
        "    TP+=1\n",
        "  elif(y_test[i]==0 and pred!=0):\n",
        "    FN+=1\n",
        "  elif(y_test[i]!=0 and pred==0):\n",
        "    FP+=1\n",
        "\n",
        "print('The F-Score of the Hopfield Classifier on MNIST Digit Data is: ', Fscore(TP,FP,FN))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eOMriVSyK1vR",
        "outputId": "cbf0f33f-d77e-4e17-9ea8-0c54db264e50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The F-Score of the Hopfield Classifier on MNIST Digit Data is:  0.47375\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The model has an F-Score of about 0.47.\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "sUSTz7qut_dP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Comparison with other models:"
      ],
      "metadata": {
        "id": "Fmh_ox-gvF5v"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Classical models like Random forest, Simple one-layer neural network,\n",
        "Simple 2 layer convolutional network and SVM-RBF have an accuracy above 90% (Mostly 93%-98%). Their F-Scores correspondingly are also generally greater than 0.9.\n",
        "*   Deep Learning Models have achieved accuracies higher than 99% and have also managed to achieve better F-Scores than Classical Models.\n",
        "\n",
        "Our Hopfield Model has an accuracy (13.53%) and F-Score (0.47) much smaller than what is seen with the above two classes of supervised learning.\n",
        "\n",
        "---\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "cN-335PWwFXt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Merits and Demerits of Hopfield as a Classifier"
      ],
      "metadata": {
        "id": "fClJ-MZZxoGI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Merits:\n",
        "\n",
        "*   It tends to work well with smaller amount of data, it is possible that the Hopfield network may be a better alternative when the data is limited to only a handful samples.\n",
        "<br>\n",
        "\n",
        "Demerits:\n",
        "\n",
        "*   It requires a significant amount of Pre-processing of data before it can be fed into the network.\n",
        "*   It can be very expensive computationally.\n",
        "*   The performance of the model is lower than that of other Supervised Learning Models.\n"
      ],
      "metadata": {
        "id": "0s7-UpPrxthT"
      }
    }
  ]
}
